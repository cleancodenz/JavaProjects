ClassPath could be a system setting or in manifest file of jar

Execute jar file
This is much easy as most classes and start up class are packed into the .jar file already
java -jar pathtojar/myjar.jar

when reference a lib, in project / libraries/ add jar file or project if you have source which makes no difference when host jar is finally generated 
Changes of libraries project foler will touch project.properties and project.xml files which are under nbproject which is in source control
When build under dist folder, myjar.jar will have a lib folder which has the referenced jar,
and in mf of jar CLASSPATH will be set to lib/reference.jar

For jar files , you do not need to point the main class

Excute class file

First you must reference full packaged name of main class if there is a package

java  javaproject.ExternalLib.AreaApp

Second where you run this is very important, when issued the above comment
The actual class file must be at javaproject/ExternalLib/AreaApp.class from current place
So normally it is being run from class folder

Third to reference another jar using cp
it must be -cp .:pathtojar/reference.jar 
It must have both current and reference jar path, separated by :
and pathtojar must use full path, ~ shell home will not work

 
Not working

java -cp .:~/NetBeansProjects/JavaProjects/JavaProject/RectangleAreaLib.jar  javaproject.ExternalLib.AreaApp

Works

java -cp .:/home/johnson/NetBeansProjects/JavaProjects/RectangleAreaLib/dist/RectangleAreaLib.jar  javaproject.ExternalLib.AreaApp

While if the jar is somewhere under current dir, relative path  is ok

java -cp .:javaproject/RectangleAreaLib.jar  javaproject.ExternalLib.AreaApp

Library management in Net beans:

You can can add lib to projects/libraries, Or property/libraries/Add Project
This will only point the build to another project
The library itself will not be imported into the host project

One way of doing it is copy the file to lib folder and Property/Libraries/ Add jar/Folder, this will add jar to project source


 